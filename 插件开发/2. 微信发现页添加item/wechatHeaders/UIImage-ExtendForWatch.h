//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <UIKit/UIImage.h>

@interface UIImage (ExtendForWatch)
+ (id)rawWepImageWithData:(struct WebPData)arg1;
+ (id)blendWebpImageWithOriginImage:(id)arg1 iterator:(struct WebPIterator)arg2;
+ (id)createGifForImages:(id)arg1 durations:(id)arg2;
+ (id)webpToPngJpgGif:(id)arg1;
+ (id)imageWithWebpData:(id)arg1;
+ (id)initWithCVMat:(const struct Mat *)arg1;
+ (id)yt_imageFromSampleBuffer:(struct opaqueCMSampleBuffer *)arg1;
+ (struct Mat)yt_bgraMatFromBuffer:(struct opaqueCMSampleBuffer *)arg1;
+ (id)yt_imageWithCVMatBGRA:(const struct Mat *)arg1;
+ (id)yt_imageWithCVMat:(const struct Mat *)arg1;
+ (id)realMakeImageWithColor:(id)arg1 size:(struct CGSize)arg2 cornerRadius:(double)arg3 roundingCorners:(unsigned long long)arg4 isResizable:(_Bool)arg5 resizeCapInsets:(struct UIEdgeInsets)arg6;
+ (id)imageWithColor:(id)arg1 size:(struct CGSize)arg2 cornerRadius:(double)arg3 roundingCorners:(unsigned long long)arg4 isResizable:(_Bool)arg5 resizeCapInsets:(struct UIEdgeInsets)arg6;
+ (id)imageWithColor:(id)arg1 size:(struct CGSize)arg2 cornerRadius:(double)arg3 roundingCorners:(unsigned long long)arg4 resizableWithCapInsets:(struct UIEdgeInsets)arg5;
+ (id)imageWithColor:(id)arg1 size:(struct CGSize)arg2 cornerRadius:(double)arg3 resizableWithCapInsets:(struct UIEdgeInsets)arg4;
+ (id)imageWithColor:(id)arg1 size:(struct CGSize)arg2 cornerRadius:(double)arg3;
+ (id)imageWithColor:(id)arg1 size:(struct CGSize)arg2;
+ (id)imageWithColor:(id)arg1;
+ (char *)getRGBWithImage:(id)arg1 retWidth:(int *)arg2 retHeight:(int *)arg3;
+ (id)grayscaleImage:(id)arg1;
+ (id)imageFromRawGrayData:(char *)arg1 Width:(unsigned long long)arg2 Height:(unsigned long long)arg3;
+ (id)realGenRoundedImage:(id)arg1 size:(struct CGSize)arg2 conerSize:(unsigned int)arg3;
+ (id)genRoundedImage:(id)arg1 size:(struct CGSize)arg2 conerSize:(unsigned int)arg3;
+ (id)genRoundedImage:(id)arg1 size:(struct CGSize)arg2;
+ (id)genThumbnailImage:(id)arg1;
+ (id)genScaledImage:(id)arg1 size:(struct CGSize)arg2;
+ (struct CGSize)calculateImageFitSizeForPreview:(id)arg1 preWidth:(int)arg2 preHeight:(int)arg3;
+ (struct CGSize)calculateImageFitSizeInternal:(id)arg1 maxWidth:(int)arg2 maxHeight:(int)arg3;
+ (struct CGSize)calculateFitSize:(struct CGSize)arg1 maxWidth:(int)arg2 maxHeight:(int)arg3;
+ (id)scaleAndRotateImage:(id)arg1 withMaxResolution:(double)arg2;
+ (id)imageInLightMode:(id)arg1 darkMode:(id)arg2;
+ (id)rawCombineTopImage:(id)arg1 andBottomImage:(id)arg2 scale:(double)arg3;
+ (id)rawCombineTopImage:(id)arg1 andBottomImage:(id)arg2;
+ (id)combineTopImage:(id)arg1 andBottomImage:(id)arg2;
+ (id)imageFromRawBGRAData:(char *)arg1 WIDTH:(unsigned long long)arg2 HEIGHT:(unsigned long long)arg3;
+ (id)imageFromRawGrayData:(char *)arg1 WIDTH:(unsigned long long)arg2 HEIGHT:(unsigned long long)arg3;
+ (id)cardTypeIconWithType:(unsigned long long)arg1 isGray:(_Bool)arg2;
+ (id)backgroundIconWithType:(unsigned long long)arg1;
+ (id)bankIconWithType:(unsigned long long)arg1;
+ (id)ECImagePath:(id)arg1;
+ (id)ECImageNamed:(id)arg1;
+ (id)imageWithCombineSize:(struct CGSize)arg1 topImage:(id)arg2 bottomImage:(id)arg3;
+ (struct CGSize)calculateImageFitSizeForNormalScaled:(id)arg1;
+ (id)genNormalScaledImage:(id)arg1;
+ (id)imageWithBackgroundImage:(id)arg1 andPosition:(int)arg2;
+ (id)getImageWithBackgroundImage:(id)arg1 WithRect:(struct CGRect)arg2;
- (id)resizeIfNeedMaxWidth:(int)arg1 andMaxHeight:(int)arg2;
- (id)applyBlurWithRadius:(double)arg1 tintColor:(id)arg2 saturationDeltaFactor:(double)arg3 maskImage:(id)arg4 scale:(double)arg5 drawBaseImage:(_Bool)arg6;
- (id)applyBlurWithRadius:(double)arg1 tintColor:(id)arg2 saturationDeltaFactor:(double)arg3 maskImage:(id)arg4;
- (id)applyTintEffectWithColor:(id)arg1;
- (id)applyDarkEffectWithBlurRadius:(float)arg1 saturation:(float)arg2;
- (id)applyDarkEffect;
- (id)applyExtraLightEffect;
- (id)applyLightEffect;
- (struct Mat)getCVGrayscaleMat;
- (struct Mat)getCVRGBMat;
- (struct Mat)getCVMat;
- (struct Mat)yt_grayMat;
- (struct Mat)yt_rgbMat;
- (struct Mat)yt_mat;
- (struct CGImage *)newBorderMask:(unsigned long long)arg1 size:(struct CGSize)arg2;
- (id)transparentBorderImage:(unsigned long long)arg1;
- (id)singleImageByApplyingAlpha:(double)arg1;
- (id)imageByApplyingAlpha:(double)arg1;
- (id)imageWithAlpha;
- (_Bool)hasAlpha;
- (id)resizeToMinSideLen:(long long)arg1;
- (id)resizeToMaxWidth:(int)arg1 andMaxHeight:(int)arg2;
- (id)realCroppedImage:(struct CGRect)arg1;
- (id)croppedImage:(struct CGRect)arg1;
- (id)fixOrientation;
- (id)rotate:(long long)arg1;
- (id)imageWithTintColor:(id)arg1 blendMode:(int)arg2;
- (id)imageChangedToOrientation:(long long)arg1;
- (id)generateResizableImageWithCapInsets:(struct UIEdgeInsets)arg1 resizingMode:(long long)arg2;
- (id)resolvedImageInCurrentStyle;
- (id)generateResizableImageWithCapInsets:(struct UIEdgeInsets)arg1;
- (id)imageInDarkMode;
- (id)imageInLightMode;
- (id)scaleToFillSize:(struct CGSize)arg1;
- (struct CGAffineTransform)transformForOrientation:(struct CGSize)arg1;
- (id)resizedImage:(struct CGSize)arg1 withQuality:(int)arg2;
- (id)resizedImage:(struct CGSize)arg1 transform:(struct CGAffineTransform)arg2 drawTransposed:(_Bool)arg3 interpolationQuality:(int)arg4 aspectFill:(_Bool)arg5;
- (id)resizedImageWithContentMode:(long long)arg1 bounds:(struct CGSize)arg2 interpolationQuality:(int)arg3;
- (id)resizedImage:(struct CGSize)arg1 interpolationQuality:(int)arg2 aspectFill:(_Bool)arg3;
- (id)resizedImage:(struct CGSize)arg1 interpolationQuality:(int)arg2;
- (id)croppedSquareImage;
- (id)croppedImage:(struct CGRect)arg1;
- (id)getRotatedImage;
- (char *)getRawGrayBytes:(struct CGSize *)arg1;
- (id)scaleImageToScale:(float)arg1;
- (id)imageWithRoundedCornerRadius:(double)arg1 backgroundColor:(id)arg2;
- (id)imageWithRoundedCornerRadius:(double)arg1;
@property(readonly, nonatomic) _Bool isChineseWordImage;
@property(nonatomic) long long chineseWordsCount;
@property(nonatomic) long long allWordsCount;
@property(nonatomic) double chineseWordRate;
- (id)fixOrientation;
@end

