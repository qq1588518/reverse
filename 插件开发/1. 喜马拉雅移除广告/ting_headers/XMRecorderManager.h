//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@class AEAudioController, AEAudioMixController, AEProcessPlaythroughChannel, NSMutableArray, NSTimer, XMAEExtAudioFilePlayer, XMAudioFilter, XMAudioPlayer, XMNoiseSuppression, XMRecordModel;
@protocol XMRMProviderProtocol;

@interface XMRecorderManager : NSObject
{
    struct _channel_group_t *_voiceProcessingBypassGroup;
    _Bool _recording;
    double _allDuration;
    double _pauseTime;
    double _startTime;
    _Bool _voiceProcessingEnabled;
    _Bool _voiceProcessingBypassAvailable;
    _Bool _enableBluetoothInput;
    _Bool _isMikePhoneRun;
    _Bool _loadingFile;
    _Bool _useHeadPhone;
    id <XMRMProviderProtocol> _provider;
    XMRecordModel *_record;
    AEAudioController *_audioController;
    XMAudioFilter *_equalizerFilter;
    XMAudioFilter *_voiceFilter;
    XMAudioFilter *_echoFilter;
    XMNoiseSuppression *_noiseReduce;
    AEProcessPlaythroughChannel *_playthrough;
    AEAudioMixController *_mixCtrl;
    XMAEExtAudioFilePlayer *_bgSoundPlayer;
    NSMutableArray *_bgPlayerArray;
    NSMutableArray *_playerArray;
    XMAudioPlayer *_mPlayer;
    XMAEExtAudioFilePlayer *_currentPlayer;
    NSTimer *_recordingTimer;
    NSMutableArray *_durations;
    double _filesAllDuartion;
    double _bgVolume;
}

+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (id)sharedManager;
- (void).cxx_destruct;
@property(nonatomic) _Bool useHeadPhone; // @synthesize useHeadPhone=_useHeadPhone;
@property(nonatomic) double bgVolume; // @synthesize bgVolume=_bgVolume;
@property(nonatomic) double filesAllDuartion; // @synthesize filesAllDuartion=_filesAllDuartion;
@property(retain, nonatomic) NSMutableArray *durations; // @synthesize durations=_durations;
@property(retain, nonatomic) NSTimer *recordingTimer; // @synthesize recordingTimer=_recordingTimer;
@property(retain, nonatomic) XMAEExtAudioFilePlayer *currentPlayer; // @synthesize currentPlayer=_currentPlayer;
@property(retain, nonatomic) XMAudioPlayer *mPlayer; // @synthesize mPlayer=_mPlayer;
@property(retain, nonatomic) NSMutableArray *playerArray; // @synthesize playerArray=_playerArray;
@property(retain, nonatomic) NSMutableArray *bgPlayerArray; // @synthesize bgPlayerArray=_bgPlayerArray;
@property(retain, nonatomic) XMAEExtAudioFilePlayer *bgSoundPlayer; // @synthesize bgSoundPlayer=_bgSoundPlayer;
@property(nonatomic) _Bool loadingFile; // @synthesize loadingFile=_loadingFile;
@property(retain, nonatomic) AEAudioMixController *mixCtrl; // @synthesize mixCtrl=_mixCtrl;
@property(retain, nonatomic) AEProcessPlaythroughChannel *playthrough; // @synthesize playthrough=_playthrough;
@property(nonatomic) _Bool isMikePhoneRun; // @synthesize isMikePhoneRun=_isMikePhoneRun;
@property(retain, nonatomic) XMNoiseSuppression *noiseReduce; // @synthesize noiseReduce=_noiseReduce;
@property(retain, nonatomic) XMAudioFilter *echoFilter; // @synthesize echoFilter=_echoFilter;
@property(retain, nonatomic) XMAudioFilter *voiceFilter; // @synthesize voiceFilter=_voiceFilter;
@property(retain, nonatomic) XMAudioFilter *equalizerFilter; // @synthesize equalizerFilter=_equalizerFilter;
@property(retain, nonatomic) AEAudioController *audioController; // @synthesize audioController=_audioController;
@property(nonatomic) _Bool enableBluetoothInput; // @synthesize enableBluetoothInput=_enableBluetoothInput;
@property(nonatomic) _Bool voiceProcessingBypassAvailable; // @synthesize voiceProcessingBypassAvailable=_voiceProcessingBypassAvailable;
@property(nonatomic) _Bool voiceProcessingEnabled; // @synthesize voiceProcessingEnabled=_voiceProcessingEnabled;
@property(readonly, nonatomic) double allDuration; // @synthesize allDuration=_allDuration;
@property(readonly, nonatomic, getter=isRecording) _Bool recording; // @synthesize recording=_recording;
@property(retain, nonatomic) XMRecordModel *record; // @synthesize record=_record;
@property(retain, nonatomic) id <XMRMProviderProtocol> provider; // @synthesize provider=_provider;
- (double)getRecordVolumeMaxValue;
- (double)getRecordVolumeMinValue;
- (_Bool)earReturnIsEnable;
- (_Bool)noiseReduceIsEnable;
- (double)adtsDurationForPath:(id)arg1;
- (double)durationForRecord:(id)arg1;
- (_Bool)p_isHeadsetPluggedIn;
- (void)fixAudioSessionCategory;
- (void)changeOutputRouteToSpeaker;
- (double)getMixTime;
- (double)getCurrentRecordTime;
- (void)bgVolumeDidChange:(float)arg1;
- (void)switchBgRecord;
- (void)checkbgMusicPlaying;
- (void)smoothBGMDown;
- (void)smoothBGMUp;
- (void)stopMikeRecord;
- (void)didStartMike;
- (_Bool)useEarReturn;
- (_Bool)startMikeRecord;
- (void)startBgRecord;
- (void)releaseMixCtrl;
- (void)stopMixRecord;
- (void)startMixRecord:(id)arg1 withError:(id *)arg2;
- (void)setMikeEnAble:(_Bool)arg1;
- (_Bool)getMikeEnAble;
- (void)_onInterruptEnd:(id)arg1;
- (void)_onInterruptBegan:(id)arg1;
- (void)_onRouteChange:(id)arg1;
- (void)_recordingTimerUpdate;
- (void)_endRecordingTimer;
- (void)_startRecordingTimer;
- (void)_endRecording;
- (void)_addChannels:(id)arg1 bypassVoiceProcessing:(_Bool)arg2;
- (void)_addChannels:(id)arg1;
- (void)removeChannels:(id)arg1;
- (void)addChannels:(id)arg1;
- (void)_addInputReceiver:(id)arg1;
- (void)_usePlaythroughChannel:(_Bool)arg1;
- (void)setupNoiseReduce;
- (void)changeBgMusicVolume:(double)arg1;
- (void)pauseBgMusic:(_Bool)arg1;
- (void)stopPlayRecordFile;
- (void)updateRecordTime;
- (void)stopRecordingWithFinishBlockWithoutStopPlay:(CDUnknownBlockType)arg1;
- (void)stopRecordingWithFinishBlock:(CDUnknownBlockType)arg1;
- (_Bool)startRecording:(id)arg1;
- (void)updateVPIO;
- (void)resetWorking;
- (void)createAudioController;
- (int)audioOptions;
- (_Bool)startAudioController;
- (void)stopWorking;
- (void)startWorking;
@property(readonly, nonatomic, getter=isPlaying) _Bool playing;
@property(readonly, nonatomic, getter=isRunning) _Bool running;
@property(readonly, nonatomic) struct AudioStreamBasicDescription audioDescription;
- (id)init;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (double)bgMusicVolume;
- (double)bgMusicPlayedTime;
- (void)changeSmoothVolumeChangeDelta;
- (void)updateBgPlayer:(id)arg1 completed:(CDUnknownBlockType)arg2;
- (void)replayBgMusicFrom:(double)arg1 withLoop:(_Bool)arg2;
- (void)playBgMusicFile:(id)arg1 withLoop:(_Bool)arg2;
- (void)playOneshotWithURL:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (_Bool)appendData:(id)arg1 toFile:(id)arg2;
- (void)deleteFile:(id)arg1;
- (void)combineAudioFiles:(id)arg1 WithCompletionHandler:(CDUnknownBlockType)arg2;
- (void)trimAudioFile:(id)arg1 fromTime:(double)arg2 toTime:(double)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (_Bool)combineRecordFiles:(id)arg1;
- (_Bool)combineRecordFiles:(id)arg1 toFile:(id)arg2;
- (void)processFilter:(char *)arg1 inSize:(int)arg2 outSize:(int *)arg3;
- (void)openMidFreqGain:(_Bool)arg1 midFreqGain:(float)arg2;
- (void)clearFilterBuffer;
- (void)updateEqualizerFilter:(id)arg1;
- (void)updateEchoFilter:(id)arg1;
- (void)updateVoiceFilter:(id)arg1;
- (void)_updateStartTime;
- (void)_oldPlayBackRecordTime:(double)arg1;
- (void)_playNextFileAfter:(id)arg1 withStartTime:(double)arg2;
- (void)_updatePauseTime;
- (void)_oldPlayRecordFile;
- (void)removeFilePlayer:(id)arg1;
- (id)playRecordWithURL:(id)arg1 error:(id *)arg2;
- (void)setPlayingStartTime:(double)arg1;
- (void)resetPlayingsStopTime;
- (void)playBackRecordTime:(double)arg1;
- (void)playRecordFile;
- (double)dubVolumeLevel;
- (void)inputAverageWavPowerLevel:(float *)arg1 peakHoldLevel:(float *)arg2;
- (void)outputAverageWavPowerLevel:(float *)arg1 peakHoldLevel:(float *)arg2;

@end

