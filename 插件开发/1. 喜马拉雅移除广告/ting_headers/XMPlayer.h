//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "XMCorePlayer.h"

#import "HttpDnsExtensionProtocol-Protocol.h"
#import "UIAlertViewDelegate-Protocol.h"
#import "XMAppAudioAction-Protocol.h"
#import "XMEncryPayDataTransferDelegate-Protocol.h"

@class NSArray, NSDictionary, NSMutableArray, NSString, NSURL, UIView, XMPlayListManager, XMServerRequest, XMSoundItem, XMTimer;
@protocol XMPlayerDelegate, XMVideoViewControllerProtocol;

@interface XMPlayer : XMCorePlayer <HttpDnsExtensionProtocol, UIAlertViewDelegate, XMEncryPayDataTransferDelegate, XMAppAudioAction>
{
    _Bool _pausedWhenInit;
    unsigned long long _playType;
    _Bool _isStopError;
    long long _authStage;
    _Bool _isReloading;
    _Bool _isUserPause;
    _Bool _playingWhenInterrupted;
    _Bool _isPausedWireLess;
    _Bool _isDownloaded;
    _Bool _isAlbumList;
    NSString *_isAsc;
    _Bool _loadCurrentUrl;
    _Bool _isTrackSamplePlay;
    _Bool _isTrackSampleEnd;
    XMTimer *_xmTimer;
    unsigned long long _autoBuyCountDown;
    _Bool _autoBuyCancelled;
    _Bool _autoBuyWaiting;
    _Bool _isWaitingAd;
    _Bool _isBMWConnected;
    _Bool _firstTimePlay;
    _Bool _playImmediately;
    _Bool _isResetSubList;
    _Bool _autoPausedWhenDidStart;
    _Bool _isDownloadWhenPlaying;
    _Bool _playingVCHasSkip;
    _Bool _onceCancelgetTrackList;
    _Bool _isCannotStartOccur;
    _Bool _needAutoPauseWhenDidStart;
    id <XMPlayerDelegate> delegate;
    XMServerRequest *trackInfoRequest;
    long long mode;
    NSDictionary *_tagData;
    XMPlayListManager *_playListManager;
    double _rate;
    unsigned long long _playActSrc;
    NSString *_errorText;
    NSURL *_originalUrl;
    NSArray *_subList;
    long long _singleTimes;
    long long _countdown;
    id <XMVideoViewControllerProtocol> _videoVC;
    double _playProcess;
    unsigned long long _headSkip;
    unsigned long long _tailSkip;
    unsigned long long _playCountValue;
    CDUnknownBlockType _onDidStartBlock;
    XMSoundItem *_mCurrentTrack;
    NSMutableArray *_mPlayList;
    UIView *_mAlertView;
    CDUnknownBlockType _autoBuyCompleted;
}

+ (void)target:(id)arg1 observeMethodCalls:(id)arg2 withBlock:(CDUnknownBlockType)arg3;
+ (void)target:(id)arg1 observeMethodCall:(SEL)arg2 withBlock:(CDUnknownBlockType)arg3;
+ (void)postNotificationWithSEL:(SEL)arg1 andPlayer:(id)arg2 andUserInfo:(id)arg3;
+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (id)sharedPlayer;
@property(copy, nonatomic) CDUnknownBlockType autoBuyCompleted; // @synthesize autoBuyCompleted=_autoBuyCompleted;
@property(retain, nonatomic) UIView *mAlertView; // @synthesize mAlertView=_mAlertView;
@property(retain, nonatomic) NSMutableArray *mPlayList; // @synthesize mPlayList=_mPlayList;
@property(retain, nonatomic) XMSoundItem *mCurrentTrack; // @synthesize mCurrentTrack=_mCurrentTrack;
@property(copy, nonatomic) CDUnknownBlockType onDidStartBlock; // @synthesize onDidStartBlock=_onDidStartBlock;
@property(nonatomic) unsigned long long playCountValue; // @synthesize playCountValue=_playCountValue;
@property(nonatomic) _Bool needAutoPauseWhenDidStart; // @synthesize needAutoPauseWhenDidStart=_needAutoPauseWhenDidStart;
@property(nonatomic) _Bool isCannotStartOccur; // @synthesize isCannotStartOccur=_isCannotStartOccur;
@property(nonatomic) _Bool onceCancelgetTrackList; // @synthesize onceCancelgetTrackList=_onceCancelgetTrackList;
@property(nonatomic) _Bool playingVCHasSkip; // @synthesize playingVCHasSkip=_playingVCHasSkip;
@property(nonatomic) unsigned long long tailSkip; // @synthesize tailSkip=_tailSkip;
@property(nonatomic) unsigned long long headSkip; // @synthesize headSkip=_headSkip;
@property(readonly, nonatomic) double playProcess; // @synthesize playProcess=_playProcess;
@property(nonatomic) __weak id <XMVideoViewControllerProtocol> videoVC; // @synthesize videoVC=_videoVC;
@property(nonatomic) _Bool isDownloadWhenPlaying; // @synthesize isDownloadWhenPlaying=_isDownloadWhenPlaying;
@property(readonly, nonatomic) _Bool autoPausedWhenDidStart; // @synthesize autoPausedWhenDidStart=_autoPausedWhenDidStart;
@property(nonatomic) long long countdown; // @synthesize countdown=_countdown;
@property(nonatomic) _Bool isResetSubList; // @synthesize isResetSubList=_isResetSubList;
@property(nonatomic) long long singleTimes; // @synthesize singleTimes=_singleTimes;
@property(retain, nonatomic) NSArray *subList; // @synthesize subList=_subList;
@property(copy, nonatomic) NSURL *originalUrl; // @synthesize originalUrl=_originalUrl;
@property(retain, nonatomic) NSString *errorText; // @synthesize errorText=_errorText;
@property(nonatomic) _Bool playImmediately; // @synthesize playImmediately=_playImmediately;
@property(nonatomic) unsigned long long playActSrc; // @synthesize playActSrc=_playActSrc;
@property(nonatomic) _Bool firstTimePlay; // @synthesize firstTimePlay=_firstTimePlay;
@property(nonatomic) double rate; // @synthesize rate=_rate;
@property(retain, nonatomic) XMPlayListManager *playListManager; // @synthesize playListManager=_playListManager;
@property(retain, nonatomic) NSDictionary *tagData; // @synthesize tagData=_tagData;
@property(nonatomic) _Bool isBMWConnected; // @synthesize isBMWConnected=_isBMWConnected;
@property(nonatomic) long long mode; // @synthesize mode;
@property(retain, nonatomic) XMServerRequest *trackInfoRequest; // @synthesize trackInfoRequest;
@property(nonatomic) __weak id <XMPlayerDelegate> delegate; // @synthesize delegate;
- (void).cxx_destruct;
- (void)appSessionOnInterruptted:(unsigned long long)arg1;
- (void)appSessionOnRouteChange:(unsigned long long)arg1 type:(unsigned long long)arg2;
- (_Bool)appSessionAudioActionNotifyResumeByOther;
- (_Bool)appSessionWasPreemptedByOther;
- (void)appsflyerTrackForplayCountValue;
- (void)reloadCurrentSoundForTrackInfoChanged;
@property(readonly, nonatomic) _Bool isWaitingAd;
- (id)paramsForSoundPatch;
- (void)showAlertHadClearedCache;
- (void)trackMultiThreadSetOrigin:(id)arg1;
- (void)trackInvalidPlayOriginUrlException:(id)arg1 withPosition:(id)arg2;
- (_Bool)checkSettingPlayOriginUrl;
- (_Bool)checkAndConvertUrl:(id)arg1;
- (void)didFailedEncryDataTransfer:(id)arg1 withTrackId:(unsigned long long)arg2 withError:(id)arg3;
- (void)onPlayerDidNeedAuthRequestWithErrorData:(id)arg1;
- (void)endPlayPayTrack;
- (void)cancelPlayPayTrack;
- (void)playwithPayTrack:(id)arg1 playlist:(id)arg2 asc:(id)arg3;
- (_Bool)getDownloaded;
- (void)onDidPausePlayForBadNetwork;
- (void)onDidResumePlayForBadNetworkWithSeek:(_Bool)arg1;
- (void)checkPlayAtTime:(_Bool)arg1;
- (void)onPlayerDidMediaServerReset;
- (void)onDidPlayErrorWithErrorFile:(int)arg1;
- (void)onPlayerDidErrorWithType:(id)arg1 withData:(id)arg2;
- (void)onPlayerDidExceptionWithType:(long long)arg1 withData:(id)arg2;
- (float)onQueryDurationHint;
- (void)onUpdatePlayProgress:(float)arg1 currentTime:(long long)arg2;
- (void)onUpdateCacheProgress:(float)arg1;
- (void)onDidStopped;
- (void)onWillStopped;
- (void)onDidEnd;
- (void)onWillEnd;
- (void)onDidPaused;
- (void)checkWifiAvailability;
- (void)updateSleepCountdown;
- (void)onDidPlaying;
- (void)onWillPlaying;
- (void)autoPauseIfNeeded;
- (void)onDidStart;
- (void)delaySeek:(id)arg1;
- (void)doParamNotify:(id)arg1;
- (void)doPlayNotify:(id)arg1;
- (void)onWillStart;
- (void)onInitLoad;
- (void)onDidEndBuffering;
- (void)onDidBeginBuffering;
- (void)onDidFailWithError:(id)arg1;
- (_Bool)onShouldStartPlaying;
- (void)changePlayingListExtension;
- (void)cancelRequestTrackInfo;
- (void)requestTrackInfo:(_Bool)arg1;
- (void)onRequestTrackInfoFailed:(id)arg1;
- (void)onRequestTrackInfoFinished:(id)arg1;
- (void)updateHeadTailSkip:(id)arg1;
- (void)didUpdateTrackInfo:(id)arg1;
- (void)willUpdateTrackInfo:(id)arg1;
- (void)playerFailedWithError:(id)arg1;
- (void)setToFirstTrack;
- (void)autoPlayCurrentTrack;
- (void)playCurrentTrack;
- (_Bool)autoPlayRandomTrack;
- (_Bool)playRandomTrack;
- (void)onPlaylistEnded:(_Bool)arg1;
- (void)onTrackChanged;
- (void)didTrackChange;
- (void)willTrackChange;
- (void)checkPlayModeForEnd;
- (void)removePlayHistoryFor:(id)arg1;
- (void)savePlayEndHistoryFor:(id)arg1;
- (void)savePlayHistoryFor:(id)arg1;
- (void)saveCurrentPlayHistory;
- (_Bool)shouldRequestAd;
- (void)loadPlayHistoryFor:(id)arg1;
- (_Bool)loadLocalAntiLeechUrl;
- (_Bool)loadUrl;
- (void)clearCacheSafely;
- (void)clearPlayList;
- (void)removeTrack:(id)arg1;
- (id)firstTrack;
- (id)prevTrack;
- (id)nextTrack;
@property(readonly, retain, nonatomic) NSString *isAsc;
@property(readonly, nonatomic) _Bool isAlbumList;
- (id)playList;
- (void)setSleepList:(long long)arg1;
@property(retain, nonatomic) XMSoundItem *currentTrack;
- (void)doSomethingBeforePlayerPlay;
- (_Bool)playPrevTrack;
- (void)setAutoNexTrack:(_Bool)arg1;
- (_Bool)autoplayNextTrack;
- (_Bool)playNextTrack;
- (_Bool)playFirstTrack;
- (void)playWithTrack:(id)arg1 playlist:(id)arg2 asc:(id)arg3 playImmediately:(_Bool)arg4 changePath:(_Bool)arg5 forceTrackChange:(_Bool)arg6;
- (void)playWithTrack:(id)arg1 playlist:(id)arg2 asc:(id)arg3 playImmediately:(_Bool)arg4 changePath:(_Bool)arg5;
- (void)playWithTrack:(id)arg1 playlist:(id)arg2 playImmediately:(_Bool)arg3 changePath:(_Bool)arg4;
- (void)playWithTrack:(id)arg1 playlist:(id)arg2 playImmediately:(_Bool)arg3;
- (void)playWithTrack:(id)arg1 playlist:(id)arg2;
- (void)reversePlayList;
- (void)appendPlayList:(id)arg1;
- (void)replacePlayList:(id)arg1;
- (void)setPlayDataUserAGC:(_Bool)arg1;
- (void)userPause;
- (void)pause;
- (void)stopCanResumePlayTime;
- (_Bool)resume;
- (void)stop;
- (_Bool)isRunning;
- (_Bool)seekToTime:(float)arg1;
- (void)playAntiLeechTrackWithOutUrl:(id)arg1;
- (void)autoPlay;
- (void)play;
- (void)mainThreadNotify:(id)arg1;
- (void)mainThreadNotify:(id)arg1 object:(id)arg2;
- (void)doMainThreadNotify:(id)arg1;
- (id)init;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (_Bool)shouldRequestSoundPatch;
- (id)suitableSoundPatch:(id)arg1;
- (id)soundPatchWithType:(long long)arg1;
- (void)playEndSoundPatchUrl:(id)arg1;
- (void)playedSoundPatchUrl:(id)arg1;
- (id)currentTrackSoundPatchPlayUrl;
- (void)requestSoundPatchInfo:(long long)arg1;
- (id)trackBuyFileURLForTrack:(id)arg1;
- (_Bool)trackBuyCanPlayCompleted;
- (_Bool)isPlayerAutoBuying;
- (void)cancelAutoBuy;
- (void)autoBuyWithCompleted:(CDUnknownBlockType)arg1;
- (void)notifyCurrentTrackAutoBuyStart;
- (void)notifyCurrentTrackAutoBuyCountDown;
- (void)onAutoBuyCountDown:(id)arg1;
- (void)startAutoBuyCountDown;
- (_Bool)shouldTrackBuyAutoBuy;
- (void)notifyCurrentTrackUnAuthrizedAfterTrackSample;
- (void)notifyCurrentTrackUnAuthrized;
- (_Bool)isPlayingTrackEnd;
- (_Bool)isPlayingTrackSample;
- (id)trackDownloadFileURLForTrack:(id)arg1;
- (_Bool)shouldAntiLeechRequest;
- (_Bool)needWaitingForBaseInfo;
- (id)originDomain;
- (void)setOriginDomain:(id)arg1;
- (void)notifySuccess:(id)arg1;
- (void)notifyFailWithIpUrl:(id)arg1 domain:(id)arg2 error:(id)arg3;
- (id)getIpHostFromUrl:(id)arg1;
- (id)convertUrl:(id)arg1 previousHosts:(id)arg2;
- (void)switchCurrentTrackToLocal;
- (void)onTrackBuyAutoBuyStateChange:(id)arg1;
- (void)onDownloadSuccess:(id)arg1;
- (void)checkAndAutoPlay:(_Bool)arg1;
- (void)onTrackBuyAlbumSuccess:(id)arg1;
- (void)onTrackBuySuccess:(id)arg1;
- (void)onLivePlayerStartNotification:(id)arg1;
- (void)callSuperPlayMethod;
- (void)dismissAlertView;
- (void)phoneNetPlayAlert;
- (void)clearWireLessNetPause;
- (void)onWifiUnAvailable;
- (void)onWifiAvailable;
- (void)likeStateChanged:(id)arg1;
- (void)onWaitingForAdNeedChange:(id)arg1;
- (void)onDynamicVideoWillPlayNotification:(id)arg1;
- (void)onSoundChatPlayNotifi;
- (void)onWeKeEnterRoom:(id)arg1;
- (void)audioInterruptionEnd:(id)arg1;
- (_Bool)isPlayingWhenInterrupted;
- (void)clearInterruptStatus;
- (void)audioInterruptionBegin:(id)arg1;
- (void)registerNotifications;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

