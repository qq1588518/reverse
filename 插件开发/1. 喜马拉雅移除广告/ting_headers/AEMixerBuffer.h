//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@class AEFloatConverter, NSTimer;

@interface AEMixerBuffer : NSObject
{
    struct AudioStreamBasicDescription _clientFormat;
    struct AudioStreamBasicDescription _mixerOutputFormat;
    struct {
        void *source;
        CDUnknownFunctionPointerType peekCallback;
        CDUnknownFunctionPointerType renderCallback;
        void *callbackUserinfo;
        CDStruct_c5d49230 buffer;
        unsigned long long lastAudioTimestamp;
        _Bool synced;
        unsigned int consumedFramesInCurrentTimeSlice;
        struct AudioStreamBasicDescription audioDescription;
        void *floatConverter;
        float volume;
        float pan;
        _Bool started;
        struct AudioBufferList *skipFadeBuffer;
        _Bool unregistering;
    } _table[30];
    struct AudioTimeStamp _currentSliceTimestamp;
    unsigned int _sampleTime;
    unsigned int _currentSliceFrameCount;
    struct OpaqueAUGraph *_graph;
    int _mixerNode;
    struct OpaqueAudioComponentInstance *_mixerUnit;
    struct _opaque_pthread_mutex_t _graphMutex;
    struct OpaqueAudioConverter *_audioConverter;
    CDStruct_c5d49230 _audioConverterBuffer;
    _Bool _audioConverterHasBuffer;
    char *_scratchBuffer;
    _Bool _graphReady;
    _Bool _automaticSingleSourceDequeueing;
    CDStruct_c5d49230 _mainThreadActionBuffer;
    NSTimer *_mainThreadActionPollTimer;
    float **_microfadeBuffer;
    int _configuredChannels;
    _Bool _assumeInfiniteSources;
    int _debugLevel;
    double _sourceIdleThreshold;
    AEFloatConverter *_floatConverter;
}

@property(nonatomic) struct AudioStreamBasicDescription clientFormat; // @synthesize clientFormat=_clientFormat;
@property(nonatomic) int debugLevel; // @synthesize debugLevel=_debugLevel;
@property(retain, nonatomic) AEFloatConverter *floatConverter; // @synthesize floatConverter=_floatConverter;
@property(nonatomic) _Bool assumeInfiniteSources; // @synthesize assumeInfiniteSources=_assumeInfiniteSources;
@property(nonatomic) double sourceIdleThreshold; // @synthesize sourceIdleThreshold=_sourceIdleThreshold;
- (void).cxx_destruct;
- (void)respondToChannelCountChange;
- (void)pollActionBuffer;
- (void)createMixingGraph;
- (void)refreshMixingGraph;
- (void)unregisterSource:(void *)arg1;
- (float)panForSource:(void *)arg1;
- (void)setPan:(float)arg1 forSource:(void *)arg2;
- (float)volumeForSource:(void *)arg1;
- (void)setVolume:(float)arg1 forSource:(void *)arg2;
- (void)setAudioDescription:(struct AudioStreamBasicDescription)arg1 forSource:(void *)arg2;
- (void)setRenderCallback:(CDUnknownFunctionPointerType)arg1 peekCallback:(CDUnknownFunctionPointerType)arg2 userInfo:(void *)arg3 forSource:(void *)arg4;
- (void)dealloc;
- (id)initWithClientFormat:(struct AudioStreamBasicDescription)arg1;

@end

