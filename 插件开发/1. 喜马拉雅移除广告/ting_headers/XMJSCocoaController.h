//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "XMJSDataSecurityDelegate-Protocol.h"

@class JSContext, JSVirtualMachine, NSMutableArray, NSMutableDictionary, NSString;
@protocol XMJSDataSecurityDelegate;

@interface XMJSCocoaController : NSObject <XMJSDataSecurityDelegate>
{
    struct OpaqueJSContext *ctx;
    struct OpaqueJSContext *workderCtx;
    JSContext *workerCtxP;
    JSVirtualMachine *jsVM;
    JSContext *ocCtx;
    _Bool ownsContext;
    id _delegate;
    _Bool useSplitCall;
    _Bool useJSLint;
    _Bool useAutoCall;
    _Bool canSetOnBoxedObjects;
    _Bool callSelectorsMissingTrailingSemicolon;
    _Bool logAllExceptions;
    _Bool useSafeDealloc;
    id <XMJSDataSecurityDelegate> _securityDelegate;
    NSString *_dyDataRoot;
    NSMutableDictionary *_boxedObjects;
    NSMutableDictionary *_blockObjects;
    NSMutableArray *_blockVariables;
    NSMutableDictionary *_privateVarDict;
}

+ (struct OpaqueJSValue *)getNativeVariableValue:(struct OpaqueJSContext *)arg1 object:(struct OpaqueJSValue *)arg2 property:(struct OpaqueJSString *)arg3 encoding:(id)arg4;
+ (id)explainMethodEncoding:(id)arg1;
+ (void)logInstanceStats;
+ (id)liveInstanceHash;
+ (int)liveInstanceCount:(Class)arg1;
+ (void)downInstanceCount:(id)arg1;
+ (void)upInstanceCount:(id)arg1;
+ (int)JSValueProtectCount;
+ (void)downJSValueProtectCount;
+ (void)upJSValueProtectCount;
+ (int)JSCocoaHashCount;
+ (void)downJSCocoaHashCount;
+ (void)upJSCocoaHashCount;
+ (int)XMJSCocoaPrivateObjectCount;
+ (void)downXMJSCocoaPrivateObjectCount;
+ (void)upXMJSCocoaPrivateObjectCount;
+ (void)garbageCollect;
+ (void)deallocAutoreleasePool;
+ (void)allocAutoreleasePool;
+ (id)formatJSException:(struct OpaqueJSValue *)arg1 inContext:(struct OpaqueJSContext *)arg2;
+ (_Bool)isMaybeSplitCall:(id)arg1 forClass:(id)arg2;
+ (_Bool)trySplitCall:(id *)arg1 class:(Class)arg2 argumentCount:(unsigned long long *)arg3 arguments:(const struct OpaqueJSValue ***)arg4 ctx:(struct OpaqueJSContext *)arg5;
+ (id)getIsSuperCall:(id)arg1 withKey:(id)arg2;
+ (void)setIsSuperCall:(id)arg1 withKey:(id)arg2 withValue:(id)arg3;
+ (_Bool)swizzleClassMethod:(id)arg1 class:(Class)arg2 jsFunction:(struct JSValueRefAndContextRef)arg3;
+ (_Bool)swizzleClassMethod:(id)arg1 class:(Class)arg2 jsFunction:(struct JSValueRefAndContextRef)arg3 encoding:(char *)arg4;
+ (_Bool)swizzleInstanceMethod:(id)arg1 class:(Class)arg2 jsFunction:(struct JSValueRefAndContextRef)arg3 encoding:(char *)arg4;
+ (_Bool)addClassMethod:(id)arg1 class:(Class)arg2 jsFunction:(struct JSValueRefAndContextRef)arg3 encoding:(char *)arg4;
+ (_Bool)addInstanceMethod:(id)arg1 class:(Class)arg2 jsFunction:(struct JSValueRefAndContextRef)arg3 encoding:(char *)arg4;
+ (_Bool)addMethod:(id)arg1 class:(Class)arg2 jsFunction:(struct JSValueRefAndContextRef)arg3 encoding:(char *)arg4;
+ (_Bool)overloadClassMethod:(id)arg1 class:(Class)arg2 jsFunction:(struct JSValueRefAndContextRef)arg3;
+ (_Bool)overloadInstanceMethod:(id)arg1 class:(Class)arg2 jsFunction:(struct JSValueRefAndContextRef)arg3;
+ (Class)createClass:(char *)arg1 parentClass:(char *)arg2;
+ (_Bool)isNeedFowardMethod:(id)arg1 class:(Class)arg2;
+ (id)getParentFowardMetodEncoding:(id)arg1 class:(Class)arg2;
+ (id)getFullKeyFowardMethodEncoding:(id)arg1 class:(Class)arg2;
+ (id)getForwardMethodEncoding:(id)arg1 class:(Class)arg2 target:(_Bool)arg3;
+ (void)addForwardMethodEncodingMap:(id)arg1 class:(Class)arg2 originEncoding:(id)arg3 forwardEncoding:(id)arg4;
+ (_Bool)forwordInstanceMethod:(id)arg1 class:(Class)arg2 jsFunction:(struct JSValueRefAndContextRef)arg3;
+ (_Bool)hoodClassForwordToOriginalInvocation:(Class)arg1 withFun:(SEL)arg2 withTypeDes:(char *)arg3;
+ (void)processInheritanClassForwardMethod;
+ (_Bool)hoodClassForwordInvocation:(Class)arg1 withFun:(SEL)arg2 withTypeDes:(char *)arg3;
+ (id)parseCFunctionEncoding:(id)arg1 functionName:(id *)arg2;
+ (id)parseObjCMethodEncoding:(const char *)arg1;
+ (void)removeChildInstanceForParentClass:(id)arg1;
+ (id)getCallChildInstanceForParentClass:(id)arg1;
+ (void)setCallChildInstance:(id)arg1 withParentClass:(id)arg2;
+ (id)parentObjCClassOfClassName:(id)arg1;
+ (const char *)typeEncodingOfMethod:(id)arg1 class:(id)arg2;
+ (void)log:(id)arg1;
+ (void)updateCustomCallPaths;
+ (id)runningArchitecture;
+ (id)controllerFromContext:(struct OpaqueJSContext *)arg1;
+ (_Bool)hasSharedController;
+ (id)sharedController;
+ (struct JSValueRefAndContextRef)jsNativeCFunctionCall:(id)arg1 encoding:(id)arg2 arguments:(id)arg3 filename:(id)arg4;
+ (void)setNativeStaticCFunctionCall:(id)arg1 withFileName:(id)arg2 withOffset64Address:(id)arg3 withOffset32Address:(id)arg4;
+ (void)setNativeCFunctionCall:(id)arg1 withOffset64Address:(id)arg2 withOffset32Address:(id)arg3;
+ (void)jsSetPointerValue:(struct JSValueRefAndContextRef)arg1 argument:(struct JSValueRefAndContextRef)arg2 encoding:(id)arg3;
+ (struct JSValueRefAndContextRef)jsGetBlockContext:(struct JSValueRefAndContextRef)arg1 withKey:(id)arg2;
+ (void)jsSetBlockContext:(struct JSValueRefAndContextRef)arg1 withKey:(id)arg2 withValue:(struct JSValueRefAndContextRef)arg3 encoding:(id)arg4;
+ (void)jsSetStructPrivateVar:(struct JSValueRefAndContextRef)arg1 name:(id)arg2 argument:(id)arg3 encoding:(id)arg4;
+ (id)getFormatSigatureStringFormSelectorEncodings:(id)arg1;
+ (struct JSValueRefAndContextRef)jsGetInstancePrivateVar:(struct JSValueRefAndContextRef)arg1 name:(id)arg2 argument:(id)arg3 encoding:(id)arg4;
+ (void)jsSetInstancePrivateVar:(struct JSValueRefAndContextRef)arg1 name:(id)arg2 value:(struct JSValueRefAndContextRef)arg3 argument:(id)arg4 encoding:(id)arg5;
+ (void)clearInstanceVariable:(id)arg1;
+ (id)getCachedInstanceVariable:(id)arg1 withName:(id)arg2;
+ (void)clearInstanceVariable:(id)arg1 withName:(id)arg2 withArg:(id)arg3;
+ (void)cacheInstanceVariable:(id)arg1 withName:(id)arg2 withArg:(id)arg3;
+ (void)callBlockBack:(id)arg1 arguments:(const struct OpaqueJSValue **)arg2 arumentsCount:(unsigned long long)arg3;
+ (void)callBlockI:(struct JSValueRefAndContextRef)arg1 arguments:(const struct OpaqueJSValue **)arg2;
+ (struct JSValueRefAndContextRef)callBlock:(struct JSValueRefAndContextRef)arg1 caller:(id)arg2 arguments:(id)arg3 argumentsCount:(unsigned long long)arg4;
+ (struct OpaqueJSValue *)getBlockWithJSObjectValue:(struct OpaqueJSValue *)arg1;
+ (id)genNativeBlockFromJSValue:(struct OpaqueJSValue *)arg1;
+ (id)genNativeClouserFromDictionary:(id)arg1;
+ (id)genNativeBlockFromDictionary:(id)arg1;
+ (id)getNativeBlockClouserFromDictionary:(id)arg1;
+ (struct OpaqueJSValue *)genFromNativeBlock:(id)arg1 withCaller:(id)arg2 withArguments:(id)arg3;
+ (struct JSValueRefAndContextRef)genDispatchMainFromNative:(id)arg1;
+ (struct OpaqueJSValue *)genFromNativeClouserBlock:(id)arg1;
+ (void)blockRelease:(struct JSValueRefAndContextRef)arg1;
+ (void)blockScopeEnd:(struct JSValueRefAndContextRef)arg1;
+ (void)blockScopeStart:(struct JSValueRefAndContextRef)arg1;
+ (void)blockDataRelease:(struct JSValueRefAndContextRef)arg1;
+ (struct JSValueRefAndContextRef)BlockDataAlloc:(id)arg1 withSel:(id)arg2;
+ (void)doURLSessionRequest:(struct JSValueRefAndContextRef)arg1 url:(id)arg2 completeHandle:(struct JSValueRefAndContextRef)arg3;
+ (struct JSValueRefAndContextRef)genURLSessionArguments:(id)arg1 block:(struct JSValueRefAndContextRef)arg2;
+ (struct JSValueRefAndContextRef)genThreadBlockArguments:(id)arg1 block:(struct JSValueRefAndContextRef)arg2;
+ (struct JSValueRefAndContextRef)genBlockArguments:(id)arg1 block:(struct JSValueRefAndContextRef)arg2;
@property(retain) NSMutableDictionary *privateVarDict; // @synthesize privateVarDict=_privateVarDict;
@property(retain) NSMutableArray *blockVariables; // @synthesize blockVariables=_blockVariables;
@property(retain) NSMutableDictionary *blockObjects; // @synthesize blockObjects=_blockObjects;
@property(retain) NSMutableDictionary *boxedObjects; // @synthesize boxedObjects=_boxedObjects;
@property(retain) NSString *dyDataRoot; // @synthesize dyDataRoot=_dyDataRoot;
@property(nonatomic) id <XMJSDataSecurityDelegate> securityDelegate; // @synthesize securityDelegate=_securityDelegate;
@property _Bool logAllExceptions; // @synthesize logAllExceptions;
@property _Bool canSetOnBoxedObjects; // @synthesize canSetOnBoxedObjects;
@property _Bool callSelectorsMissingTrailingSemicolon; // @synthesize callSelectorsMissingTrailingSemicolon;
@property _Bool useAutoCall; // @synthesize useAutoCall;
@property _Bool useJSLint; // @synthesize useJSLint;
@property _Bool useSplitCall; // @synthesize useSplitCall;
@property _Bool useSafeDealloc; // @synthesize useSafeDealloc;
@property id delegate; // @synthesize delegate=_delegate;
- (struct OpaqueJSValue *)JSCocoa:(id)arg1 callMethod:(id)arg2 ofObject:(id)arg3 privateObject:(id)arg4 argumentCount:(unsigned long long)arg5 arguments:(const struct OpaqueJSValue **)arg6 inContext:(struct OpaqueJSContext *)arg7 exception:(const struct OpaqueJSValue **)arg8;
- (_Bool)JSCocoa:(id)arg1 setProperty:(id)arg2 ofObject:(id)arg3 toValue:(struct OpaqueJSValue *)arg4 inContext:(struct OpaqueJSContext *)arg5 exception:(const struct OpaqueJSValue **)arg6;
- (void)logBoxedObjects;
- (void)safeDeallocInstance:(id)arg1;
- (void)unlinkAllReferences;
- (void)garbageCollect;
- (int)runTests:(id)arg1;
- (int)runTests:(id)arg1 withSelector:(SEL)arg2;
- (void)callDelegateForException:(struct OpaqueJSValue *)arg1;
- (id)formatJSException:(struct OpaqueJSValue *)arg1;
- (_Bool)appleSDKFJSClassName:(id)arg1;
- (id)classForJSFunction:(struct OpaqueJSValue *)arg1;
- (id)selectorForJSFunction:(struct OpaqueJSValue *)arg1;
- (_Bool)isFunctionVariadic:(id)arg1;
- (_Bool)isMethodVariadic:(id)arg1 class:(id)arg2;
- (const char *)typeEncodingOfMethod:(id)arg1 class:(id)arg2;
- (id)instanceStats;
- (struct OpaqueJSContext *)workderCtx;
- (id)ocCtx;
- (struct OpaqueJSContext *)ctx;
- (struct OpaqueJSValue *)newPrivateFunction;
- (struct OpaqueJSValue *)newPrivateObject;
- (void)log:(id)arg1;
- (id)getDecrptedData:(id)arg1;
- (id)getJScocoDyDataRootPath;
- (void)printNoDataPath:(id)arg1;
- (_Bool)loadObjCParserData:(id)arg1;
- (_Bool)loadObjCToJSMapData:(id)arg1;
- (_Bool)loadCBridgeSupportByData:(id)arg1;
- (_Bool)loadObjectToJavaScriptCoreParser:(_Bool)arg1;
- (_Bool)loadObjectCFunctionBridgeSymblSupport:(_Bool)arg1;
- (_Bool)removeObjectWithName:(id)arg1;
- (id)objectWithName:(id)arg1;
- (struct OpaqueJSValue *)setObjectNoRetain:(id)arg1 withName:(id)arg2 attributes:(unsigned int)arg3;
- (struct OpaqueJSValue *)setObject:(id)arg1 withName:(id)arg2;
- (struct OpaqueJSValue *)setObject:(id)arg1 withName:(id)arg2 attributes:(unsigned int)arg3;
- (id)JSBlockToObject:(struct JSValueRefAndContextRef)arg1;
- (struct JSValueRefAndContextRef)toJSBlock:(id)arg1;
- (struct JSValueRefAndContextRef)toJS:(id)arg1;
- (struct OpaqueJSValue *)_toJS:(id)arg1;
- (id)toObject:(struct OpaqueJSValue *)arg1;
- (id)toString:(struct OpaqueJSValue *)arg1;
- (int)toInt:(struct OpaqueJSValue *)arg1;
- (double)toDouble:(struct OpaqueJSValue *)arg1;
- (_Bool)toBool:(struct OpaqueJSValue *)arg1;
- (id)unboxJSValueRef:(struct OpaqueJSValue *)arg1;
- (_Bool)isSyntaxValid:(id)arg1 error:(id *)arg2;
- (id)expandJSMacros:(id)arg1 path:(id)arg2;
- (id)expandJSMacros:(id)arg1 path:(id)arg2 errors:(id)arg3;
- (struct OpaqueJSValue *)JSValueForObject:(id)arg1;
- (struct OpaqueJSValue *)callJSFunction:(struct OpaqueJSValue *)arg1 withJSValueArray:(id)arg2;
- (struct OpaqueJSValue *)anonEval:(id)arg1 withThis:(struct OpaqueJSValue *)arg2;
- (_Bool)hasJSFunctionNamed:(id)arg1;
- (struct OpaqueJSValue *)JSFunctionNamed:(id)arg1;
- (struct OpaqueJSValue *)callJSFunctionNamed:(id)arg1 withArgumentsArray:(id)arg2;
- (struct OpaqueJSValue *)callJSFunctionNamed:(id)arg1 withArguments:(id)arg2;
- (struct OpaqueJSValue *)callJSFunction:(struct OpaqueJSValue *)arg1 withArguments:(id)arg2;
- (struct OpaqueJSValue *)evalJSString:(id)arg1;
- (struct OpaqueJSValue *)evalJSString:(id)arg1 withScriptPath:(id)arg2;
- (_Bool)evalJSFile:(id)arg1 isEncrypted:(_Bool)arg2;
- (_Bool)evalJSFile:(id)arg1;
- (void)jsEvaluateScriptContext:(struct OpaqueJSContext *)arg1 withValue:(id)arg2 withPath:(id)arg3 withReturnValue:(const struct OpaqueJSValue **)arg4 withException:(const struct OpaqueJSValue **)arg5;
- (_Bool)evalJSFile:(id)arg1 toJSValueRef:(const struct OpaqueJSValue **)arg2 isEncrypted:(_Bool)arg3;
- (_Bool)evalJSFile:(id)arg1 toJSValueRef:(const struct OpaqueJSValue **)arg2;
- (void)onlySetEffectContex:(struct OpaqueJSContext *)arg1 propertyName:(id)arg2 value:(struct OpaqueJSValue *)arg3;
- (void)printfJSObjectVariablePropertyContex:(struct OpaqueJSContext *)arg1 value:(struct OpaqueJSValue *)arg2;
- (_Bool)isSyntaxValid:(id)arg1;
- (_Bool)hasFunction:(id)arg1;
- (id)callFunction:(id)arg1 withArguments:(id)arg2;
- (id)callFunction:(id)arg1;
- (id)eval:(id)arg1;
- (void)accomodateWebKitInspector;
- (void)finalize;
- (void)dealloc;
- (void)cleanUp;
- (void)startPrepareConfigDataEncrypted:(_Bool)arg1;
- (void)initCoreDataWithJSContextRef:(struct OpaqueJSContext *)arg1;
- (id)init;
- (id)initWithGlobalContext:(struct OpaqueJSContext *)arg1;
- (void)registerExtension;
- (id)getBoxBlockOfObject:(id)arg1;
- (void)deleteBoxOfObject:(id)arg1 advanceFreeMem:(_Bool)arg2;
- (void)deleteBoxOfObject:(id)arg1;
- (_Bool)isBlockObjectBoxed:(id)arg1;
- (_Bool)isObjectBoxed:(id)arg1;
- (struct OpaqueJSValue *)boxBlockCallObject:(id)arg1;
- (struct OpaqueJSValue *)boxBlockObject:(id)arg1;
- (struct OpaqueJSValue *)boxObject:(id)arg1;
- (void)clearBlockCallerVariables;
- (void)addBlockJSRefVariable:(struct OpaqueJSValue *)arg1 withJContext:(struct OpaqueJSContext *)arg2 withFFIVariable:(id)arg3;
- (void)addBlockJSRefVariable:(id)arg1;
- (void)endCollectionBlockVarable;
- (void)startCollectionBlockVariable;
- (void)removeBlockCallerByKey:(id)arg1;
- (id)getBlockCallerByKey:(id)arg1;
- (void)setBlockCaller:(id)arg1 forKey:(id)arg2;

@end

