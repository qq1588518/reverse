//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "IHAPCallback-Protocol.h"

@class NSDate, NSMutableArray, XMBaseViewController, XMServerRequest;

@interface XMABQManager : NSObject <IHAPCallback>
{
    _Bool _isAlbumList;
    _Bool _needCache;
    _Bool _needResumePlay;
    NSMutableArray *playList;
    NSMutableArray *radioList;
    NSMutableArray *programList;
    XMBaseViewController *lockViewController;
    NSDate *endDate;
    XMServerRequest *currentListRequest;
    NSMutableArray *timelineArray;
    long long _relativeAlbumId;
    long long _oldStateBarStyle;
    NSMutableArray *_cacheList;
}

+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (id)shareInstance;
@property(nonatomic) _Bool needResumePlay; // @synthesize needResumePlay=_needResumePlay;
@property(retain, nonatomic) NSMutableArray *cacheList; // @synthesize cacheList=_cacheList;
@property(nonatomic) long long oldStateBarStyle; // @synthesize oldStateBarStyle=_oldStateBarStyle;
@property(nonatomic) long long relativeAlbumId; // @synthesize relativeAlbumId=_relativeAlbumId;
@property(nonatomic) _Bool needCache; // @synthesize needCache=_needCache;
@property(nonatomic) _Bool isAlbumList; // @synthesize isAlbumList=_isAlbumList;
@property(retain, nonatomic) NSMutableArray *timelineArray; // @synthesize timelineArray;
@property(retain, nonatomic) XMServerRequest *currentListRequest; // @synthesize currentListRequest;
@property(retain, nonatomic) NSDate *endDate; // @synthesize endDate;
@property(retain, nonatomic) XMBaseViewController *lockViewController; // @synthesize lockViewController;
@property(retain, nonatomic) NSMutableArray *programList; // @synthesize programList;
@property(retain, nonatomic) NSMutableArray *radioList; // @synthesize radioList;
@property(retain, nonatomic) NSMutableArray *playList; // @synthesize playList;
- (void).cxx_destruct;
- (void)updateProgramList:(id)arg1;
- (void)getRadioSchedules:(long long)arg1;
- (void)getRadioSchedules:(long long)arg1 seqNum:(int)arg2;
- (void)getRadios:(long long)arg1 count:(long long)arg2 radio_type:(int)arg3 province_code:(int)arg4 city_code:(int)arg5 seqNum:(int)arg6;
- (void)requestLocation:(long long)arg1 count:(long long)arg2 radio_type:(int)arg3 city_code:(int)arg4 seqNum:(int)arg5;
- (void)getProvinces:(int)arg1;
- (void)changeFavourite:(_Bool)arg1 albumId:(long long)arg2 seqNum:(int)arg3;
- (void)getRelativeAlbumsUseAlbumId:(long long)arg1 count:(long long)arg2 album_id:(long long)arg3 seqNum:(int)arg4;
- (void)getCurrentPlayList:(int)arg1;
- (void)getCateAlbums:(long long)arg1 count:(long long)arg2 category_id:(long long)arg3 keywordId:(long long)arg4 seqNum:(int)arg5;
- (void)getAlbums:(long long)arg1 count:(long long)arg2 category_id:(long long)arg3 tag_name:(id)arg4 seqNum:(int)arg5;
- (void)getTags:(long long)arg1 seqNum:(int)arg2;
- (void)getCategories:(long long)arg1 count:(long long)arg2 seqNum:(int)arg3;
- (void)getQualityContent:(long long)arg1 count:(long long)arg2 specialId:(long long)arg3 seqNum:(int)arg4;
- (void)getTracks:(long long)arg1 count:(long long)arg2 albumId:(long long)arg3 seqNum:(int)arg4;
- (void)getHotAlbums:(long long)arg1 count:(long long)arg2 seqNum:(int)arg3;
- (void)getGuessLikeAlbums:(long long)arg1 count:(long long)arg2 seqNum:(int)arg3;
- (void)getMyHistories:(long long)arg1 count:(long long)arg2 seqNum:(int)arg3;
- (void)getDownloadedTracks:(long long)arg1 count:(long long)arg2 seqNum:(int)arg3 albumId:(long long)arg4;
- (void)getMyDownloads:(long long)arg1 count:(long long)arg2 seqNum:(int)arg3;
- (void)getMyFavorites:(long long)arg1 count:(long long)arg2 seqNum:(int)arg3;
- (void)getQualityList:(long long)arg1 count:(long long)arg2 seqNum:(int)arg3;
- (void)getHotTracks:(long long)arg1 count:(long long)arg2 seqNum:(int)arg3;
- (void)sendNowPlayingLiveInfoWithSeqNum:(int)arg1;
- (_Bool)sendLiveInfoWithState:(long long)arg1;
- (void)playControlWithLiveState:(long long)arg1 withTrackInfo:(_Bool)arg2;
- (void)onLivePlayerDidFail;
- (void)onLivePlayerStop;
- (void)onLivePlayerPause;
- (void)onLivePlayerDidPlaying;
- (void)onLivePlayerEndBuffer;
- (void)onLivePlayerStartBuffer;
- (void)onLivePlayerRadioChanged;
- (void)onLivePlayerPlayingProgress:(id)arg1;
- (void)sendPlayingStateAfterChanged;
- (void)playControlWithState:(long long)arg1 withTrackInfo:(_Bool)arg2;
- (void)playerWithPay;
- (void)playerDidFail;
- (void)playerStopped;
- (void)playerPaused;
- (void)playerDidPlaying;
- (void)playerEndBuffer;
- (void)playerStartBuffer;
- (void)playerTrackChanged;
- (void)onWifiUnAvailable;
- (void)audioInterruptionEnd;
- (void)audioInterruptionBegin;
- (void)onHapGeneralError;
- (void)onHapConnectionLost;
- (void)onHapServiceEstablished;
- (void)onHapServiceNotEstablished;
- (void)onHapCommandReceivedWithSequenceNumber:(int)arg1 payload:(id)arg2 contentType:(id)arg3;
- (void)handleUrl:(id)arg1;
- (void)popConnectedViewController;
- (void)pushConnectedViewController;
- (void)sendPlayState:(long long)arg1 payload:(id)arg2;
- (void)sendJsonResponseWithSequenceNumber:(int)arg1 payload:(id)arg2;
- (void)sendFailResponseWithSequenceNumber:(int)arg1 errorCode:(long long)arg2;
- (_Bool)playPrevTrack;
- (_Bool)playNextTrack;
- (void)playWithProgram:(id)arg1 playlist:(id)arg2;
- (_Bool)isCanPlay:(id)arg1;
- (_Bool)isPayTrack:(id)arg1;
- (_Bool)checkIsLive;
- (_Bool)isLivePlayer;
- (_Bool)isNormalPlayer;
- (id)getRegularDateFromTimeString:(id)arg1 withIndex:(long long)arg2;
- (id)valueWithCheck:(id)arg1;
- (id)init;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

