//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "XMLiveRoomNormalMicManager.h"

#import "XMLiveChatMessageHandlerDelegate-Protocol.h"
#import "XMZegoAudioManagerDelegate-Protocol.h"

@class AVAudioPlayer, NSArray, NSDate, NSObject, NSString, XMLiveRoomApproachInfo, XMZegoAudioManager, YYThreadSafeArray;
@protocol OS_dispatch_queue, OS_dispatch_source, XMMicManagerLiveStreamDelegate;

@interface XMMicManager : XMLiveRoomNormalMicManager <XMLiveChatMessageHandlerDelegate, XMZegoAudioManagerDelegate>
{
    NSObject<OS_dispatch_queue> *_ioQueue;
    void *_ioQueueTag;
    NSObject<OS_dispatch_source> *_notifyMessageDispatchSource;
    _Bool _needMarkFreshUser;
    _Bool _hasFreshUser;
    _Bool _speakerEnabled;
    _Bool _needAutoPlay;
    _Bool _hasRecvOnlineUserNotify;
    _Bool _isAnonymous;
    _Bool _isPlaying;
    int _muteType;
    YYThreadSafeArray *_micUserInfoArray;
    unsigned long long _micUserState;
    YYThreadSafeArray *_freshMicUserArray;
    NSDate *_joinDate;
    NSArray *_topRankList;
    long long _onlineUserNumber;
    XMZegoAudioManager *_zegoAudioManager;
    id <XMMicManagerLiveStreamDelegate> _delegate;
    XMLiveRoomApproachInfo *_liveItem;
    long long _onlineUserInfoNotifyTimeStamp;
    CDUnknownBlockType _openMicSuccessBlock;
    CDUnknownBlockType _openMicFailBlock;
    CDUnknownBlockType _startCommunicationSuccessBlock;
    CDUnknownBlockType _startCommunicationFailBlock;
    CDUnknownBlockType _stopCommunicationSuccessBlock;
    CDUnknownBlockType _stopCommunicationFailBlock;
    CDUnknownBlockType _sendJoinSuccessBlock;
    CDUnknownBlockType _sendJoinFailBlock;
    CDUnknownBlockType _closeMicSuccessBlock;
    CDUnknownBlockType _closeMicFailBlock;
    CDUnknownBlockType _allowUserConnectSuccessBlock;
    CDUnknownBlockType _allowUserConnectFailBlock;
    CDUnknownBlockType _hangUpUserSuccessBlock;
    CDUnknownBlockType _hangUpUserFailBlock;
    CDUnknownBlockType _muteUserSuccessBlock;
    CDUnknownBlockType _muteUserFailBlock;
    YYThreadSafeArray *_hangupUserArray;
    long long _hangupUserCount;
    YYThreadSafeArray *_connectingUserArray;
    AVAudioPlayer *_callAudioPlayer;
}

+ (id)sharedInstance;
- (void).cxx_destruct;
@property(nonatomic) _Bool isPlaying; // @synthesize isPlaying=_isPlaying;
@property(retain, nonatomic) AVAudioPlayer *callAudioPlayer; // @synthesize callAudioPlayer=_callAudioPlayer;
@property(nonatomic) _Bool isAnonymous; // @synthesize isAnonymous=_isAnonymous;
@property(nonatomic) _Bool hasRecvOnlineUserNotify; // @synthesize hasRecvOnlineUserNotify=_hasRecvOnlineUserNotify;
@property(retain, nonatomic) YYThreadSafeArray *connectingUserArray; // @synthesize connectingUserArray=_connectingUserArray;
@property(nonatomic) long long hangupUserCount; // @synthesize hangupUserCount=_hangupUserCount;
@property(retain, nonatomic) YYThreadSafeArray *hangupUserArray; // @synthesize hangupUserArray=_hangupUserArray;
@property(copy, nonatomic) CDUnknownBlockType muteUserFailBlock; // @synthesize muteUserFailBlock=_muteUserFailBlock;
@property(copy, nonatomic) CDUnknownBlockType muteUserSuccessBlock; // @synthesize muteUserSuccessBlock=_muteUserSuccessBlock;
@property(copy, nonatomic) CDUnknownBlockType hangUpUserFailBlock; // @synthesize hangUpUserFailBlock=_hangUpUserFailBlock;
@property(copy, nonatomic) CDUnknownBlockType hangUpUserSuccessBlock; // @synthesize hangUpUserSuccessBlock=_hangUpUserSuccessBlock;
@property(copy, nonatomic) CDUnknownBlockType allowUserConnectFailBlock; // @synthesize allowUserConnectFailBlock=_allowUserConnectFailBlock;
@property(copy, nonatomic) CDUnknownBlockType allowUserConnectSuccessBlock; // @synthesize allowUserConnectSuccessBlock=_allowUserConnectSuccessBlock;
@property(copy, nonatomic) CDUnknownBlockType closeMicFailBlock; // @synthesize closeMicFailBlock=_closeMicFailBlock;
@property(copy, nonatomic) CDUnknownBlockType closeMicSuccessBlock; // @synthesize closeMicSuccessBlock=_closeMicSuccessBlock;
@property(copy, nonatomic) CDUnknownBlockType sendJoinFailBlock; // @synthesize sendJoinFailBlock=_sendJoinFailBlock;
@property(copy, nonatomic) CDUnknownBlockType sendJoinSuccessBlock; // @synthesize sendJoinSuccessBlock=_sendJoinSuccessBlock;
@property(copy, nonatomic) CDUnknownBlockType stopCommunicationFailBlock; // @synthesize stopCommunicationFailBlock=_stopCommunicationFailBlock;
@property(copy, nonatomic) CDUnknownBlockType stopCommunicationSuccessBlock; // @synthesize stopCommunicationSuccessBlock=_stopCommunicationSuccessBlock;
@property(copy, nonatomic) CDUnknownBlockType startCommunicationFailBlock; // @synthesize startCommunicationFailBlock=_startCommunicationFailBlock;
@property(copy, nonatomic) CDUnknownBlockType startCommunicationSuccessBlock; // @synthesize startCommunicationSuccessBlock=_startCommunicationSuccessBlock;
@property(copy, nonatomic) CDUnknownBlockType openMicFailBlock; // @synthesize openMicFailBlock=_openMicFailBlock;
@property(copy, nonatomic) CDUnknownBlockType openMicSuccessBlock; // @synthesize openMicSuccessBlock=_openMicSuccessBlock;
@property(nonatomic) long long onlineUserInfoNotifyTimeStamp; // @synthesize onlineUserInfoNotifyTimeStamp=_onlineUserInfoNotifyTimeStamp;
@property(nonatomic) _Bool needAutoPlay; // @synthesize needAutoPlay=_needAutoPlay;
@property(copy, nonatomic) XMLiveRoomApproachInfo *liveItem; // @synthesize liveItem=_liveItem;
@property(nonatomic) __weak id <XMMicManagerLiveStreamDelegate> delegate; // @synthesize delegate=_delegate;
- (void)setZegoAudioManager:(id)arg1;
@property(nonatomic) _Bool speakerEnabled; // @synthesize speakerEnabled=_speakerEnabled;
@property(nonatomic) long long onlineUserNumber; // @synthesize onlineUserNumber=_onlineUserNumber;
@property(retain, nonatomic) NSArray *topRankList; // @synthesize topRankList=_topRankList;
@property(retain, nonatomic) NSDate *joinDate; // @synthesize joinDate=_joinDate;
@property(nonatomic) _Bool hasFreshUser; // @synthesize hasFreshUser=_hasFreshUser;
@property(nonatomic) _Bool needMarkFreshUser; // @synthesize needMarkFreshUser=_needMarkFreshUser;
@property(retain) YYThreadSafeArray *freshMicUserArray; // @synthesize freshMicUserArray=_freshMicUserArray;
@property(nonatomic) int muteType; // @synthesize muteType=_muteType;
@property(nonatomic) unsigned long long micUserState; // @synthesize micUserState=_micUserState;
@property(retain) YYThreadSafeArray *micUserInfoArray; // @synthesize micUserInfoArray=_micUserInfoArray;
- (_Bool)sendAcceptUserListNotify:(id)arg1;
- (_Bool)sendOnlineUserInfo:(_Bool)arg1 onLineUserList:(id)arg2 andTimeStamp:(unsigned long long)arg3;
- (_Bool)sendLeaveReq;
- (_Bool)sendJoinReq:(_Bool)arg1;
- (_Bool)sendMuteStatusUpdateNotify:(long long)arg1 muteType:(int)arg2;
- (_Bool)sendOperatorMuteAck:(long long)arg1;
- (_Bool)sendMuteMsg:(long long)arg1 isMute:(_Bool)arg2;
- (_Bool)sendHangUpMsg:(long long)arg1;
- (_Bool)sendAllowOperatorConnectAck:(long long)arg1;
- (_Bool)sendAllowOperatorConnectMsg:(long long)arg1 withChannelName:(id)arg2 andChannelPwd:(id)arg3;
- (_Bool)sendStopCommunicationReq;
- (_Bool)sendStartCommunicationReq;
- (void)recvAcceptUserListNotify:(id)arg1;
- (void)recvUserChangeNotify:(id)arg1;
- (void)recvLeaveRsp:(id)arg1;
- (void)recvJoinRsp:(id)arg1;
- (void)recvMuteStatusUpdateNotify:(id)arg1;
- (void)recvMuteAck:(id)arg1;
- (void)recvMuteMsg:(id)arg1;
- (void)recvHangUpAck:(id)arg1;
- (void)recvHangUpMsg:(id)arg1;
- (void)recvAllowOperatorConnectAck:(id)arg1;
- (void)recvAllowOperatorConnectMsg:(id)arg1;
- (void)recvStopCommunicationRsp:(id)arg1;
- (void)recvStartCommunicationRsp:(id)arg1;
- (_Bool)processMicControlMessage:(id)arg1;
- (void)recvNormalMsg:(id)arg1;
- (void)flushNotify;
- (void)onKickOut;
- (void)removeDiffRoomStream:(id)arg1;
- (void)addDiffRoomStream:(id)arg1;
- (_Bool)enableReverb:(_Bool)arg1 mode:(int)arg2;
- (void)resetAudioFilter;
- (void)changeAudioFilter:(id)arg1;
- (_Bool)isOnMic;
- (void)enableLoopback:(_Bool)arg1;
- (_Bool)isOpenedLoopback;
- (void)stopCallAudio;
- (_Bool)playCallAudio;
- (id)zegoAudioManager;
- (void)closeMic;
- (void)connectingUserTimerHandler:(long long)arg1;
- (void)hangupTimerHandler:(long long)arg1;
- (void)sortUserByRank;
- (void)onlineUserChanged;
- (void)removeFreshMicUser:(long long)arg1;
- (void)addFreshMicUser:(long long)arg1;
- (void)sendOnlineUserInfo;
- (void)recvOnlineUserNotifyMsg:(id)arg1;
- (void)setAuxVolume:(int)arg1;
- (_Bool)enableAux:(_Bool)arg1;
- (void)doSpeakerEnable;
- (void)unMuteSelf;
- (void)muteSelf;
- (void)unMuteAudioOfUser:(long long)arg1 success:(CDUnknownBlockType)arg2 fail:(CDUnknownBlockType)arg3;
- (void)muteAudioOfUser:(long long)arg1 success:(CDUnknownBlockType)arg2 fail:(CDUnknownBlockType)arg3;
- (void)muteAckFail:(long long)arg1;
- (void)muteAckSuccess:(long long)arg1;
- (void)beMute:(_Bool)arg1;
- (void)hangUpAckFail:(long long)arg1;
- (void)hangUpAckSuccess:(long long)arg1;
- (void)beHangUp;
- (void)leaveChannelFail;
- (void)leaveChannelSuccess;
- (void)sendJoinFail;
- (void)sendJoinSuccess:(id)arg1 isAlreadyStart:(_Bool)arg2;
- (void)beAllowOperatorConnect:(id)arg1;
- (void)allowOperatorConnectAckFail:(long long)arg1;
- (void)allowOperatorConnectAckSuccess:(long long)arg1;
- (void)stopCommunicationFail;
- (void)stopCommunicationSuccess;
- (void)startCommunicationFail;
- (void)startCommunicationSuccess:(id)arg1 isAlreadyStart:(_Bool)arg2;
- (void)onAVEngineStart;
- (void)onAVEngineStop;
- (void)onPublishQualityUpdate:(id)arg1 quality:(CDStruct_64582893)arg2;
- (void)onVoiceRateChanged:(float)arg1;
- (void)onLivingDuration:(double)arg1;
- (void)onPlayStateUpdate:(int)arg1 streamID:(id)arg2;
- (void)onPublishStateUpdate:(int)arg1 streamID:(id)arg2 streamInfo:(id)arg3;
- (void)onKickOut:(int)arg1 roomID:(id)arg2;
- (void)onLoginRoom:(int)arg1 roomID:(id)arg2;
- (void)onDisconnect:(int)arg1 roomID:(id)arg2;
- (void)invalidStreamOfUid:(unsigned long long)arg1;
- (void)didAudioMuted:(int)arg1 ofUser:(unsigned long long)arg2;
- (void)didOfflineOfUid:(unsigned long long)arg1;
- (void)didJoinedOfUid:(unsigned long long)arg1 username:(id)arg2;
- (void)closeMicFail;
- (void)closeMicSuccess;
- (void)openMicFail;
- (void)openMicSuccess;
- (void)hangUpUser:(long long)arg1 success:(CDUnknownBlockType)arg2 fail:(CDUnknownBlockType)arg3;
- (void)allowUserConnect:(long long)arg1 success:(CDUnknownBlockType)arg2 fail:(CDUnknownBlockType)arg3;
- (void)leaveMic;
- (void)closeMicSuccess:(CDUnknownBlockType)arg1 fail:(CDUnknownBlockType)arg2;
- (void)sendJoinMicMsg:(_Bool)arg1 success:(CDUnknownBlockType)arg2 fail:(CDUnknownBlockType)arg3;
- (void)stopCommunicationSuccess:(CDUnknownBlockType)arg1 fail:(CDUnknownBlockType)arg2;
- (void)startCommunicationSuccess:(CDUnknownBlockType)arg1 fail:(CDUnknownBlockType)arg2;
- (void)openMicSuccess:(CDUnknownBlockType)arg1 fail:(CDUnknownBlockType)arg2;
- (void)onLiveInfoUpdate:(id)arg1;
- (void)configWithLiveItem:(id)arg1;
- (id)init;
- (void)clean;
- (void)dealloc;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

